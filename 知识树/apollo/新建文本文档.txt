访问阿波罗服务地址

在apoll-core.jar
apollo-env.properties 文件中配置
MetaDomainConsts类中加载..
ConfigUtil类中 getApolloEnv方法进行加载


获取服务器运行环境

DefaultServerProvider类  WeimobServerProvider 继承这个类
从文件中获取
从系统环境中获取
从服务器名称中获取



服务器配置缓存到本地目录
createLocalConfigRepository.createLocalConfigRepository()
WeimobConfigFactory 

ConfigUtil.getDefaultLocalCacheDir


获取系统启动环境，获取appid
ConfigServiceLocator.assembleMetaServiceUrl


http://apollo.internal.weimobdev.com/services/config?appId=saas.nst-tour-adapter-pc-service&ip=192.168.145.1


RemoteConfigLongPollService 长轮询方式Long-Polling



RemoteConfigRepository loadApolloConfig方法，加载远程配置

链接示例：
http://172.21.248.5:8080/configs/saas.nst-tour-pay-service/default/weimob.arch-common?ip=172.18.50.20


AutoUpdateConfigChangeListener自动更新字段属性，事件

长轮询过程
RemoteConfigRepository在构造方法中，加载RemoteConfigLongPollService类，然后开启长轮询
this.scheduleLongPollingRefresh();
// 客户端定时拉取配置，默认5分钟一次
this.schedulePeriodicRefresh();

RemoteConfigLongPollService.doLongPollingRefresh()获得更新通知RemoteConfigLongPollService.notify()方法触发通知（remoteConfigRepository.onLongPollNotified(lastServiceDto, remoteMessages);）
RemoteConfigRepository.onLongPollNotified()
RemoteConfigRepository.sync() 
AbstractConfigRepository.fireRepositoryChange() - > DefaultConfig.onRepositoryChange() -> AbstractConfig fireConfigChange()方法触发事件


加载配置文件过程
ConfigService.getConfig(namespace)方法 -> DefaultConfigManager.getConfig(String namespace)
DefaultConfigFactory.create(String namespace)方法，从远端获取配置文件，创建DefaultConfig对象
DefaultConfig构造方法中执行initialize()方法，-> RemoteConfigRepository.getConfig()方法
-> this.sync()方法 -> ApolloConfig current = loadApolloConfig();
loadApolloConfig()方法通过调用远程接口获取指定命名空间下的配置


WeimobConfigFactory继承DefaultConfigFactory，并扩展了缓存文件到本地方法，
DefaultConfigFactory.create(String namespace)方法，从远端获取配置文件


ApolloInjector 

meta mai它
Netflix  naiti fu lai ke si
Processor  prəʊsesə(r)
Definition  [ˌdefɪˈnɪʃn]

spring-cloud-config
spring提供的基于git的分布式配置中心

archaius 啊柯shei 
Netflix公司开源项目，基于java的动态属性配置框架

disconf
百度开源分布式配置管理平台

apollo
携程开源分布式配置管理平台

对于Mac/Linux，文件位置/data/appdatas/apollo
对于Windows，文件位置为D:/data/appdatas/apollo





个配置文件的概念。组的概念
Namespace的获取权限分为两种：
private （私有的）
public （公共的）
这里的获取权限是相对于Apollo客户端来说的。

4.1 private权限
private权限的Namespace，只能被所属的应用获取到。一个应用尝试获取其它应用private的Namespace，Apollo会报“404”异常。

4.2 public权限
public权限的Namespace，能被任何应用获取。

5. Namespace的类型
Namespace类型有三种：

私有类型
公共类型
关联类型（继承类型）
5.1 私有类型
私有类型的Namespace具有private权限。例如上文提到的“application” Namespace就是私有类型。

5.2 公共类型
5.2.1 含义
公共类型的Namespace具有public权限。公共类型的Namespace相当于游离于应用之外的配置，且通过Namespace的名称去标识公共Namespace，所以公共的Namespace的名称必须全局唯一。






1.2 配置基本概念
既然Apollo定位于配置中心，那么在这里有必要先简单介绍一下什么是配置。

按照我们的理解，配置有以下几个属性：

配置是独立于程序的只读变量

配置首先是独立于程序的，同一份程序在不同的配置下会有不同的行为。
其次，配置对于程序是只读的，程序通过读取配置来改变自己的行为，但是程序不应该去改变配置。
常见的配置有：DB Connection Str、Thread Pool Size、Buffer Size、Request Timeout、Feature Switch、Server Urls等。
配置伴随应用的整个生命周期

配置贯穿于应用的整个生命周期，应用在启动时通过读取配置来初始化，在运行时根据配置调整行为。
配置可以有多种加载方式

配置也有很多种加载方式，常见的有程序内部hard code，配置文件，环境变量，启动参数，基于数据库等
配置需要治理

权限控制
由于配置能改变程序的行为，不正确的配置甚至能引起灾难，所以对配置的修改必须有比较完善的权限控制
不同环境、集群配置管理
同一份程序在不同的环境（开发，测试，生产）、不同的集群（如不同的数据中心）经常需要有不同的配置，所以需要有完善的环境、集群配置管理
框架类组件配置管理
还有一类比较特殊的配置 - 框架类组件配置，比如CAT客户端的配置。
虽然这类框架类组件是由其他团队开发、维护，但是运行时是在业务实际应用内的，所以本质上可以认为框架类组件也是应用的一部分。
这类组件对应的配置也需要有比较完善的管理方式。




4.1 Core Concepts
在介绍高级特性前，我们有必要先来了解一下Apollo中的几个核心概念：

application (应用)
这个很好理解，就是实际使用配置的应用，Apollo客户端在运行时需要知道当前应用是谁，从而可以去获取对应的配置
每个应用都需要有唯一的身份标识 -- appId，我们认为应用身份是跟着代码走的，所以需要在代码中配置，具体信息请参
见Java客户端使用指南。

environment (环境)
配置对应的环境，Apollo客户端在运行时需要知道当前应用处于哪个环境，从而可以去获取应用的配置
我们认为环境和代码无关，同一份代码部署在不同的环境就应该能够获取到不同环境的配置
所以环境默认是通过读取机器上的配置（server.properties中的env属性）指定的，不过为了开发方便，我们也支持运
行时通过System Property等指定，具体信息请参见Java客户端使用指南。

cluster (集群)
一个应用下不同实例的分组，比如典型的可以按照数据中心分，把上海机房的应用实例分为一个集群，把北京机房的应用
实例分为另一个集群。
对不同的cluster，同一个配置可以有不一样的值，如zookeeper地址。
集群默认是通过读取机器上的配置（server.properties中的idc属性）指定的，不过也支持运行时通过System Property指定


namespace (命名空间)
一个应用下不同配置的分组，可以简单地把namespace类比为文件，不同类型的配置存放在不同的文件中，如数据库配置文件，
RPC配置文件，应用自身的配置文件等
应用可以直接读取到公共组件的配置namespace，如DAL，RPC等
应用也可以通过继承公共组件的配置namespace来对公共组件的配置做调整，如DAL的初始数据库连接数




1.2.1 Why Eureka
为什么我们采用Eureka作为服务注册中心，而不是使用传统的zk、etcd呢？我大致总结了一下，有以下几方面的原因：

它提供了完整的Service Registry和Service Discovery实现
首先是提供了完整的实现，并且也经受住了Netflix自己的生产环境考验，相对使用起来会比较省心。
和Spring Cloud无缝集成
我们的项目本身就使用了Spring Cloud和Spring Boot，同时Spring Cloud还有一套非常完善的开源代码来整合Eureka，所以使用起来非常方便。
另外，Eureka还支持在我们应用自身的容器中启动，也就是说我们的应用启动完之后，既充当了Eureka的角色，同时也是服务的提供者。这样就极大的提高了服务的可用性。
这一点是我们选择Eureka而不是zk、etcd等的主要原因，为了提高配置中心的可用性和降低部署复杂度，我们需要尽可能地减少外部依赖。
