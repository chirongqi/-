Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException）

构造方法
// 参数不能是null  
Optional<Integer> optional1 = Optional.of(1);  
  
// 参数可以是null  
Optional<Integer> optional2 = Optional.ofNullable(null);  
 
// 参数可以是非null  
Optional<Integer> optional3 = Optional.ofNullable(2);  

isPresent()：判断值是否存在

返回默认值
orElse()如果有值则返回该值，否则返回传递给它的参数值
User result = Optional.ofNullable(user).orElse(user2);

orElseGet(Supplier supplier)：功能与orElse一样，只不过orElseGet参数是一个对象
Optional.ofNullable(1).orElseGet(() -> {  
    return 1000;  
}));//true  


转换值
Map()
 String email = Optional.ofNullable(user)
      .map(u -> u.getEmail()).orElse("default@gmail.com");

flatMap()：功能与map()相似，差别请看如下代码。flatMap方法与map方法类似，
区别在于mapping函数的返回值不同。map方法的mapping函数返回值可以是任何类型T，而flatMap方法的mapping函数必须是Optional。

过滤filter()

public void whenFilter_thenOk() {
    User user = new User("anna@gmail.com", "1234");
    Optional<User> result = Optional.ofNullable(user)
      .filter(u -> u.getEmail() != null && u.getEmail().contains("@"));
    assertTrue(result.isPresent());
}
